#version=RHEL8

url --noverifyssl --url=https://download.rockylinux.org/pub/rocky/9/BaseOS/x86_64/kickstart/
lang en_US.UTF-8
keyboard us
rootpw --lock
firewall --disabled
selinux --permissive
timezone America/Kentucky/Louisville
text
skipx

# Installation destination options
zerombr
clearpart --all --initlabel --drives=sda
ignoredisk --only-use=sda
autopart --type=lvm

firstboot --disabled
eula --agreed
services --enabled=NetworkManager,sshd

repo --name="BaseOS" --baseurl=http://dl.rockylinux.org/pub/rocky/9/BaseOS/\$basearch/os/ --cost=200
repo --name="AppStream" --baseurl=http://dl.rockylinux.org/pub/rocky/9/AppStream/\$basearch/os/ --cost=200
repo --name="CRB" --baseurl=http://dl.rockylinux.org/pub/rocky/9/CRB/\$basearch/os/ --cost=200
repo --name="extras" --baseurl=http://dl.rockylinux.org/pub/rocky/9/extras/\$basearch/os --cost=200

%pre --interpreter=/bin/bash
# Generate a dynamic hostname and save it to an include file
HOSTNAME_PREFIX="Scanner"
ID=$(cat /proc/sys/kernel/random/uuid | cut -d "-" -f 3)
HOSTNAME="${HOSTNAME_PREFIX}-${ID}"
echo "network --bootproto=dhcp --hostname=${HOSTNAME}" > /usr/local/share/host-include.ks

# URL to fetch the username
URL="https://usernameapiv1.vercel.app/api/random-usernames"
# Generate a dynamic username and save it to a temporary file
response=$(curl -s -w "%{http_code}" -o /usr/local/share/username.json $URL)
# Check if the response code is 200
if [ "${response: -3}" == "200" ]; then
    # Extract the JSON part of the response
    json=$(cat /usr/local/share/username.json)
    # Extract username
    username=$(echo $json | grep -oP '"usernames":\["\K[^"]+')
    # Remove trailing underscore using bash parameter expansion
    clean_username=${username%_}
else
    # Set a static username
    clean_username="user-${ID}"
fi

# Make password
password=$(tr -dc 'A-Za-z0-9!?%=' < /dev/urandom | head -c 10)
# Add to the include statement
echo "user --name=${clean_username} --password=${password} --plaintext" > /usr/local/share/user-include.ks

%end

# /usr/local/share is used due to minimal boot environment being lost between pre and post.
%include /usr/local/share/host-include.ks
%include /usr/local/share/user-include.ks

%packages --ignoremissing --excludedocs
# Specify necessary packages here
%end

%post
authselect select minimal --force
curl --http1.1 -o /tmp/config.sh https://raw.githubusercontent.com/CriticalWombat/KickScan/dev/post-install-scripts/config.sh
user=$(cat /usr/local/share/user-include.ks | grep -oP '(?<=--name=)[^ ]+')
pass=$(cat /usr/local/share/user-include.ks | grep -oP '(?<=--password=)[^ ]+')
ip_address=$(hostname -I | awk '{print $1}')
chmod 755 /usr/local/share/config.sh
/usr/local/share/config.sh ${user} ${pass} ${ip_address}


# First Time Logon script logic
curl --http1.1 -o /usr/local/bin/first_time_logon.sh https://raw.githubusercontent.com/CriticalWombat/KickScan/dev/post-install-scripts/first_time_logon.sh
chmod +x /usr/local/bin/first_time_logon.sh

cat <<EOF >> /home/${user}/.bashrc
if [ ! -f "/home/${user}/.first-logon-done" ]; then
    sudo touch "/home/${user}/.first-logon-done"
    /usr/local/bin/first_time_logon.sh ${user} ${ip_address}
fi
EOF

# Suppress kernel messages to console
echo 'kernel.printk = 3 4 1 3' >> /etc/sysctl.conf
sysctl -p
%end

# Reboot after Kickstart to complete initial setup
reboot
