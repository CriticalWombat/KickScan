#version=RHEL8

url --noverifyssl --url https://download.rockylinux.org/pub/rocky/9/BaseOS/x86_64/kickstart/
lang en_US.UTF-8
keyboard us
network --bootproto=dhcp --hostname Scanner4
user --name=nexigen --password=123! --plaintext
rootpw toor --lock
firewall --disabled
selinux --permissive
timezone America/Kentucky/Louisville
bootloader --location=mbr
text
skipx
zerombr
#Disk partitioning information
clearpart --initlabel --all
part /boot --fstype ext4 --size=2048
part swap  --recommended
part /     --fstype ext4 --size=1 --grow

firstboot --disabled
eula --agreed
services --enabled=NetworkManager,sshd

repo --name="BaseOS" --baseurl=http://dl.rockylinux.org/pub/rocky/9/BaseOS/$basearch/os/ --cost=200
repo --name="AppStream" --baseurl=http://dl.rockylinux.org/pub/rocky/9/AppStream/$basearch/os/ --cost=200
repo --name="CRB" --baseurl=http://dl.rockylinux.org/pub/rocky/9/CRB/$basearch/os/ --cost=200
repo --name="extras" --baseurl=http://dl.rockylinux.org/pub/rocky/9/extras/$basearch/os --cost=200

%packages --ignoremissing --excludedocs
# Need this packages specified even when no packages selected
%end

%pre

# Unmount all non-essential filesystems to ensure they can be formatted

# List all mounted filesystems
mountpoints=$(lsblk -ln -o MOUNTPOINT | grep -v "^$")

# Unmount all mount points except for /proc, /sys, /dev, and /run
for mount in $mountpoints; do
    case $mount in
        /proc|/sys|/dev|/run)
            echo "Skipping unmount of essential filesystem: $mount"
            ;;
        *)
            echo "Unmounting filesystem: $mount"
            umount -lf $mount
            ;;
    esac
done

# Ensure no swap is active
swapoff -a

# Re-read the partition table
for disk in $(lsblk -dn -o NAME,TYPE | grep disk | awk '{print $1}'); do
    partprobe /dev/$disk || kpartx -u /dev/$disk
done
%end

%post

authselect select minimal --force
curl --http1.1 -o /tmp/config.sh https://raw.githubusercontent.com/CriticalWombat/KickScan/dev/post-install-scripts/config.sh
chmod 755 /tmp/config.sh

/tmp/config.sh

# Enable docker daemon so that it launches on reboot
systemctl enable docker

##### Update /etc/issue with first time logon info #####
tee /etc/issue > /dev/null << 'EOF'

#==============================================#
#  __  ___      _       _____                  #
#  | |/ (_)    | |     / ____|                 #
#  | ' / _  ___| | __ | (___   ___ __ _ _ __   #
#  |  < | |/ __| |/ /  \___ \ / __/ _` | '_ \  #
#  | . \| | (__|   <   ____) | (_| (_| | | | | #
#  |_|\_\_|\___|_|\_\ |_____/ \___\__,_|_| |_| #
#==============================================#                                       
                                             

                         Welcome to KickScan

!!! Safely store the credentials below. This is the only time they will be visible. !!!

Hostname: HOSTNAME
IP Address: IP_ADDRESS
User Name: USERNAME
User Password: USERPASSWORD

ROOT LOGON IS LOCKED BY DEFAULT - USE SUDO!
Root Password: ROOT_PASSWORD

EOF
##### Update /etc/issue with first time logon info #####

##### First Time Logon script logic #####
curl --http1.1 -o /usr/local/bin/first_time_logon.sh https://raw.githubusercontent.com/CriticalWombat/KickScan/dev/post-install-scripts/first_time_logon.sh
chmod +x /usr/local/bin/first_time_logon.sh
# Curl a seperate first time logon script with setuid enabled for root priv
curl --http1.1 -o /usr/local/bin/first_time_logon_priv.sh https://raw.githubusercontent.com/CriticalWombat/KickScan/dev/post-install-scripts/first_time_logon_priv.sh
#chown root:root /usr/local/bin/first_time_logon_priv.sh
chmod +x /usr/local/bin/first_time_logon_priv.sh
# update bashrc to run first_time_logon.sh on first logon
cat <<EOF >> /home/nexigen/.bashrc

# Check if the first logon marker file exists
if [ ! -f "/home/nexigen/.first-logon-done" ]; then
    # Create the marker file to ensure the script runs only once
    sudo touch "/home/nexigen/.first-logon-done"
    # Run the first time logon scripts
    /usr/local/bin/first_time_logon_priv.sh
    /usr/local/bin/first_time_logon.sh
fi
EOF
##### First Time Logon script logic #####

##### Suppress kernel messages to console #####
echo 'kernel.printk = 3 4 1 3' >> /etc/sysctl.conf
sysctl -p
##### Suppress kernel messages to console #####

%end

# Reboot after Kickstart to complete intial setup
reboot

